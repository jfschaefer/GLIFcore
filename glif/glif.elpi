namespace glif {
    % OPTION
    kind option type -> type.
    type some Type -> option Type.
    type none (option Type).

    % ITEMS
    kind item type -> type -> type.
    type mkItem int -> int -> (option string) -> (option AstType) -> (option LogType) -> item AstType LogType.
    type getId (item AstType LogType) -> int -> prop.
    getId (mkItem I _ _ _ _) I.
    type getSenteceId (item AstType LogType) -> int -> prop.
    getSenteceId (mkItem _ I _ _ _) I.
    type getStr (item AstType LogType) -> string -> prop.
    getStr (mkItem _ _ (some S) _ _) S.
    type getStrOpt (item AstType LogType) -> (option string) -> prop.
    getStrOpt (mkItem _ _ S _ _) S.
    type getAst (item AstType LogType) -> AstType -> prop.
    getAst (mkItem _ _ _ (some A) _) A.
    type getAstOpt (item AstType LogType) -> (option AstType) -> prop.
    getAstOpt (mkItem _ _ _ A _) A.
    type getLog (item AstType LogType) -> LogType -> prop.
    getLog (mkItem _ _ _ _ (some L)) L.
    type getLogOpt (item AstType LogType) -> (option LogType) -> prop.
    getLogOpt (mkItem _ _ _ _ L) L.


    % READING ITEMS
    type endofitems (item A L).   % used to indicate end of item list

    type isanitem (item A L) -> prop.
    isanitem endofitems :- !, fail.
    isanitem (mkItem _ _ _ _ _).

    type readitem (item A L) -> prop.
    readitem I :-
        input_line std_in S,
        string_to_term S I,
        % readterm std_in I,
        isanitem I.

    type readitems (list (item A L)) -> prop.
    readitems [I|R] :- readitem I, !, readitems R.
    readitems [].

    
    % COMMANDS
    type filter (item A L -> prop) -> list String -> prop.
    filter F _Args :- readitems Items, filter_actual F Items. %, std.length Items N, print "filter-summary:" N.

    type filter_actual (item A L -> prop) -> list (item A L) -> prop.
    filter_actual F [I|_] :- F I, getId I Id, print "filter-output:" Id, fail.
    filter_actual F [_|R] :- filter_actual F R.
    filter_actual _ [].

    type query int -> prop -> (list String) -> prop.
    query N X [] :-
        N > 0,
        new_safe S,
        X,
        print "Query succeeded",
        stash_in_safe S 0,
        open_safe S L,
        std.length L N.  % backtrack until the length has been reached
    query _ _ [] :-
        print "Query failed".
}
